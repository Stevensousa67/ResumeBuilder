"""
Author: Steven Sousa
Prof. John Santore
Institution: Bridgewater State University - COMP490 - Senior Design & Development
Version: 12Feb2025

Description: This file contains unit tests for Project 1 - Sprint 2.
Disclaimer: These tests were primarily generated by a LLM."""

import pytest
import json
import src.Data_Processing as Data_Processing
import src.DBUtils as DBUtils

# Defining mock functions
def mock_parse_salary(obj):
    job_id = obj.get('id')
    if job_id == "f97b4a007d08a432":
        return 71460, 123270
    elif job_id == "5c026a4e9285a29d":
        return 85000, 95000
    elif job_id == "li-4027570412":
        return 0, 0  # or None, None if that's what you expect
    else:
        return None, None  # Default return for other cases

def mock_get_salary_frequency(obj):
    job_id = obj.get('id')
    if job_id == "f97b4a007d08a432":
        return 'yearly'
    elif job_id == "5c026a4e9285a29d":
        return 'yearly'
    elif job_id == "li-4027570412":
        return 'yearly'
    else:
        return None

def mock_get_url(obj):
    job_id = obj.get('id')
    if job_id == "f97b4a007d08a432":
        return "https://www.indeed.com/viewjob?jk=f97b4a007d08a432"
    elif job_id == "5c026a4e9285a29d":
        return "https://www.indeed.com/viewjob?jk=5c026a4e9285a29d"
    elif job_id == "li-4027570412":
        return "https://www.linkedin.com/jobs/view/4027570412"
    else:
        return None

def mock_get_remote_status(obj):
    job_id = obj.get('id')
    if job_id == "f97b4a007d08a432":
        return True
    elif job_id == "5c026a4e9285a29d":
        return False
    elif job_id == "li-4027570412":
        return False
    else:
        return None

@pytest.fixture(scope="module")
def json_test_data():
    with open('tests/data/test_data.json', 'r') as f:
        return [json.loads(line) for line in f]

@pytest.fixture(scope="module")
def expected_results():
    with open('tests/data/expected_results.json', 'r') as f:
        return json.load(f)

@pytest.mark.parametrize("index", [0, 1, 2])  # Pass indices instead
def test_extract_job_data(index, json_test_data, expected_results, mocker):
    input_obj = json_test_data[index]
    expected_output = expected_results[index]

    mocker.patch('src.Data_Processing.parse_salary', side_effect=mock_parse_salary)
    mocker.patch('src.Data_Processing.get_salary_frequency', side_effect=mock_get_salary_frequency)
    mocker.patch('src.Data_Processing.get_url', side_effect=mock_get_url)
    mocker.patch('src.Data_Processing.get_remote_status', side_effect=mock_get_remote_status)

    result = Data_Processing.extract_job_data(input_obj)
    expected_tuple = tuple(expected_output)
    assert result == expected_tuple
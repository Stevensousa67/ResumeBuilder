from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse
from django.core.files.base import ContentFile
from django.contrib import messages
from .models import GeneratedResume
from .forms import ProfileSelectionForm
from jobs.models import Job
from .services.gemini_api import generate_resume_content
from .services.pdf_service import convert_markdown_to_pdf


# Create your views here.
@login_required
def generate_resume(request, job_id):
    """View to select a profile and generate a resume for a specific job"""
    job = get_object_or_404(Job, pk=job_id)

    # Check if user already has a resume for this job
    existing_resume = GeneratedResume.objects.filter(
        user=request.user,
        job=job).order_by('-created_date').first()

    if request.method == 'POST':
        form = ProfileSelectionForm(request.user, request.POST)

        if form.is_valid():
            profile = form.cleaned_data['profile']

            # Calculate next version number for this job-profile combination
            latest_version = GeneratedResume.objects.filter(
                user=request.user,
                job=job,
                profile=profile).order_by('-version').values_list('version', flat=True).first() or 0

            next_version = latest_version + 1

            try:
                # Generate resume content via Gemini API
                markdown_content = generate_resume_content(profile, job)

                # Convert markdown content to PDF
                pdf_content = convert_markdown_to_pdf(markdown_content)

                # Create resume record
                resume = GeneratedResume(
                    user=request.user,
                    job=job,
                    profile=profile,
                    version=next_version,
                    content=markdown_content
                )

                # Save PDF file
                filename = f"{request.user.first_name} {request.user.last_name} Resume - {profile.profile_name} - v{next_version}.pdf"
                resume.pdf_file.save(filename, ContentFile(pdf_content))
                resume.save()

                messages.success(request, 'Resume successfully generated')
                return redirect('gemini:view_resume', pk=resume.pk)

            except Exception as e:
                messages.error(request, f'Error generating resume: {e}')
    else:
        form = ProfileSelectionForm(request.user)

    return render(request, 'gemini/generate_resume.html', {
        'form': form,
        'job': job,
        'existing_resume': existing_resume
    })


@login_required
def view_resume(request, pk):
    """View a generated resume"""
    resume = get_object_or_404(GeneratedResume, pk=pk, user=request.user)

    # Check if users wants to download the PDF
    if 'download' in request.GET:
        if resume.pdf_file:
            response = HttpResponse(resume.pdf_file.read(), content_type='application/pdf')
            response['Content-Disposition'] = f'attachment; filename="{resume.pdf_file.name.split("/")[-1]}"'
            return response
        else:
            messages.error(request, 'PDF file not found. Try generating the resume again.')

    return render(request, 'gemini/view_resume.html', {
        'resume': resume,
        'job': resume.job
    })


@login_required
def resume_list(request):
    """View a list of all resumes generated by the user"""
    resumes = GeneratedResume.objects.filter(user=request.user).order_by('-created_date')
    return render(request, 'gemini/resume_list.html', {'resumes': resumes})

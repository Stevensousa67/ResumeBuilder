name: Python application

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
      SUPABASE_PORT: ${{ secrets.SUPABASE_PORT }}
      SUPABASE_DB_NAME: ${{ secrets.SUPABASE_DB_NAME }}
      SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
      SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
      DB_NAME_DEFAULT: ${{ secrets.DB_NAME_DEFAULT }}
      DB_USER_DEFAULT: ${{ secrets.DB_USER_DEFAULT }}
      DB_PASSWORD_DEFAULT: ${{ secrets.DB_PASSWORD_DEFAULT }}
      DB_HOST_DEFAULT: ${{ secrets.DB_HOST_DEFAULT }}
      DB_PORT_DEFAULT: ${{ secrets.DB_PORT_DEFAULT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME_DEFAULT }}
          POSTGRES_USER: ${{ secrets.DB_USER_DEFAULT }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD_DEFAULT }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.13
        uses: actions/setup-python@v3
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          # pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Django Management Commands
        env:
          TESTING: "True"
        run: |
          # python manage.py create_db
          # python manage.py migrate
          # python manage.py data_processing

      - name: Run Django Tests
        run: |
          # python manage.py test jobs.tests candidate.tests gemini.tests

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and push to ECR
        run: |
          docker build \
            --platform linux/amd64 \
            -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest \
            -f ResumeBuilder/Dockerfile ResumeBuilder/
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
            docker stop app || true
            docker rm app || true
            docker run -d --name app -p 80:8000 \
              -e AWS_REGION=${{ secrets.AWS_REGION }} \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest
